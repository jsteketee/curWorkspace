

PART 2

2. Use the code I already wrote for colorization which is an implementation
   of the main technique from the Welsh paper (uses l-alpha-beta color space,
   does luminance remapping, random jittered sampling, etc.)

   - instead of the l-alpha-beta color conversion, treat the
     intensity of a pixel in the color image as the luminance, and in the
     grayscale image, the value of the pixel is its intensity.  Still do
     remapping and all the other steps (just don't use l-alpha-beta color
     space)

   - cluster the color and grayscale image with k-means (same k for each)
     and use those clusters as the swatches.
      --- you'll need to figure out which cluster in the color image is the
          most appropriate match to the cluster that the grayscale pixel in
          question is part of.
          --- then you'll want to grab the color of an appropriate pixel
              within that cluster of the color image to assign to output

   - try clustering by "intensity-and-texture" or "texture" or some other
     idea that you have and implement


===========

Attach a zip file (please do not create a rar file) with all the code and:

  submit all the java files necessary for me to compile your program

  and some original images appropriately named resulting colorized images
  
  and a text file that explains which input images were used to create which
  colorized images (and the clustering technique used)

  also explain in text, your idea of how you automatically "matched" clusters
  such that a gray pixel in some cluster of the gray image is only matched
  against a color pixel in 1 corresponding cluster.



