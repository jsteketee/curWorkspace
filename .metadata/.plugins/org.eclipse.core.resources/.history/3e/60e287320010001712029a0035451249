import java.util.Random;

public class KMeans {

	// Number of classes
	private int K;

	// 2d Array containing characteristics of each pixel.
	private Characteristic[][] pixelProperties;

	// Array containing the mean pixel characteristics for each class.
	private Characteristic[] means;

	// Number of dimensions in characteristics.
	private int numDimensions;

	// Tells the KMeans object what distance method to use.
	KMeansType type;

	// Random number generator
	private Random rand = new Random();

	/**
	 * Constructs a KMeans object with the appropriate number of classes,
	 * characteristic dimensions, number of rows and number of columns.
	 * 
	 * @param numClasses The number of classes
	 * @param numDims The number of dimensions in characteristic
	 * @param numRows The number of rows
	 * @param numCols The number of columns
	 * @param type The specific characteristic/distance scheme being used.
	 */
	public KMeans(int numClasses, int numDims, int numRows, int numCols, KMeansType type) {
		this.type = type; 
		K = numClasses;
		means = new Characteristic[K];
		pixelProperties = new Characteristic[numRows][numCols];
		numDimensions = numDims;
	}

	public RGBImage runKmeans() {
		randomizeMeans();

		// create a labelled (by classes) image
		RGBImage lbldImg = new RGBImage(pixelProperties.length, pixelProperties[0].length);

		// needs to determine the class for a pixel
		// can have a method that determines this class and returns it
		// call: int classNum = determineClass(pixelProperties[r][c])

		// also needs to call: recomputeMeans();

		return lbldImg;
	}

	/**
	 * Creates the initial means that KMeans will use to cluster pixels into classes. 
	 */
	private void randomizeMeans() {
		for (int k = 0; k < K; k++){
			for(int i=0; i<numDims;i++){
				
			}
		}
			means[i] = rand.nextDouble();
	}

	private void recomputeMeans() {
		// will need a sum per K of all the items belonging to each class
		Characteristic[] sums = new Characteristic[K];

		// need to call addValues(pixelProperties[r][c]);
	}

	public void assignPixelProperties(int r, int c, double[] props) {
		pixelProperties[r][c] = new Characteristic(numDimensions);
		pixelProperties[r][c].setValues(props);
	}

	private int determineClass(Characteristic c) {
		// call distance in Characteristic class
		// to determine smallest distance between c and each mean
		// return class associated with the smallest distance
	}
}
