
/**
 * Represents the attributes associated with a pixel, the Kmeans class that a
 * pixel is in, and a method to calculate the Kmeans distances between two
 * pixels.
 * 
 * @author Jack Steketee
 *
 */
public class Characteristic {

	// Array of doubles containing a value for each pixel attribute.
	private double[] attributes;

	// Number denoting which K means class the pixel is in.
	private int classNumber;

	/**
	 * Constructs a characteristic object with the appropriate number of
	 * attribute values.
	 * 
	 * @param numDims The number of attributes associated with each pixel.
	 */
	public Characteristic(int numDims) {
		attributes = new double[numDims];
	}

	public void addValues(Characteristic c) {
		for (int i = 0; i < attributes.length; i++) {
			attributes[i] += c.attributes[i];
		}
	}

	public void setValues(double[] vals) {
		for (int i = 0; i < vals.length; i++) {
			attributes[i] = vals[i];
		}
	}

	public double getVal(int idx) {
		return attributes[idx];
	}

	public void setVal(int idx, double value) {
		attributes[idx] = value;
	}

	public void setClassNumber(int cN) {
		classNumber = cN;
	}

	public int getClassNumber() {
		return classNumber;
	}

	public double RGBDistance(Characteristic c2) {
		return Math.sqrt((this.attributes[0] - c2.attributes[0]) * (this.attributes[0] - c2.attributes[0])
				+ (this.attributes[1] - c2.attributes[1]) * (this.attributes[1] - c2.attributes[1])
				+ (this.attributes[1] - c2.attributes[1]) * (this.attributes[1] - c2.attributes[1]));
	}

	public static double distance(Characteristic c1, Characteristic c2) {
		return c1.RGBDistance(c2);
	}
}
