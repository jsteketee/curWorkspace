import java.awt.Color;
import java.io.IOException;

/**
 * Class that is responsible for reading images, feeding them into Kmeans, and
 * writing output images based on kMean classes.
 * 
 * @author Jack Steketee, Mike Eckmann
 */
public class ClusterImage {
	public static void main(String args[]) throws IOException {

		String imageName = args[0];
		int K = Integer.parseInt(args[1]);
		KMeansType type = KMeansType.values()[Integer.parseInt(args[2])];
		RGBImage inputImg = new RGBImage(imageName);
		KMeans km = new KMeans(K, inputImg.getNumRows(), inputImg.getNumCols(), type);
		assignCharacteristics(km, inputImg, type);
		km.runKmeans();
		recolor(km, inputImg, type);
		inputImg.writeImage("RGBClustered" + imageName);
	}

	private static void assignCharacteristics(KMeans km, RGBImage inputImg, KMeansType type) {
		if (type.equals(KMeansType.RGB_Distance)) {
			RGBPixel pixel;
			double[] RGBVals = new double[3];
			for (int r = 0; r < inputImg.getNumRows(); r++) {
				for (int c = 0; c < inputImg.getNumCols(); c++) {
					pixel = inputImg.getPixel(r, c);
					RGBVals[0] = (double) pixel.getRed() / 255;
					RGBVals[1] = (double) pixel.getGreen() / 255;
					RGBVals[2] = (double) pixel.getBlue() / 255;
					km.assignPixelProperties(r, c, RGBVals);
				}
			}
		} else if (type.equals(KMeansType.HUE_Distance)) {
			RGBPixel pixel;
			for (int r = 0; r < inputImg.getNumRows(); r++) {
				for (int c = 0; c < inputImg.getNumCols(); c++) {
					pixel = inputImg.getPixel(r, c);
					km.assignPixelProperties(r, c, new double[] { calculateNormalizedHue(pixel) });
				}
			}
		}
	}

	private static void recolor(KMeans km, RGBImage inputImg, KMeansType type) {
		Characteristic[][] pixelClasses = km.getPixelProperties();
		Characteristic[] means = km.getClassMeans();
		int classNum;
		for (int r = 0; r < inputImg.getNumRows(); r++) {
			for (int c = 0; c < inputImg.getNumCols(); c++) {
				classNum = pixelClasses[r][c].getClassNumber();
				inputImg.setPixel(r, c, (int) (means[classNum].getVal(0) * 255),
						(int) (means[classNum].getVal(1) * 255), (int) (means[classNum].getVal(2) * 255));
			}
		}
	}

	private static double calculateNormalizedHue(RGBPixel pixel) {
		float hue; 
		hue = Color.RGBtoHSB(pixel.getRed(), pixel.getGreen(), pixel.getBlue(), null)[0];
		return (double) hue; 
	}
}






