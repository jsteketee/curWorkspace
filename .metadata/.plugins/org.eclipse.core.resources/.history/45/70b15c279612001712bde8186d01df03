CS376A Digital Image Processing
Skidmore College

Assignment 03
Due: 
Part 1 due Tuesday 03/28/2017 by 11:59 p.m. to meckmann@skidmore.edu
Part 2 due Monday 04/03/2017 by 11:59 p.m. to meckmann@skidmore.edu

=============

PART 1

1. Finish implementation of K-means clustering
   - to visualize your clusters, assign each class a different color
     and output an image
   - if use R, G and B only as your clustering characteristics, then
     the average (mean) color of each cluster is good choice for 
     display
   - if use any other characteristics, visualize using some premade
     standard set of colors (have 16 prepared) and if say your K
     is 5, only use the first 5,  if K is 16 use all 16 colors

   - implement k-means clustering on R, G, and B as the three 
     characteristics
        - run it on several images with different values of k
          e.g. k=3,4,5,6 for 3 of your own images
     - if image file name was image.jpg, name your output images
        color-3means-image.jpg
        color-4means-image.jpg
        color-5means-image.jpg
        color-6means-image.jpg

   - also do 2 characteristics: intensity and standard deviation of intensity
     in a 5x5 neighborhood
        - run it on several images with different values of k
          e.g. k=3,4,5,6 for 3 of your own images
     - if image file name was image.jpg, name your output images
        intensity-and-texture-3means-image.jpg
        intensity-and-texture-4means-image.jpg
        intensity-and-texture-5means-image.jpg
        intensity-and-texture-6means-image.jpg

     Note well: make the intensity range from 0..1 (scale by dividing calculated
        intensity by 255) BUT you should also make the standard deviation be
        in the range 0..1 --- to do this you'll need to figure out the min
        and max standard deviations and then scale your range of standard 
        deviations to the range 0..1

        e.g. if you find the minimum standard deviation to be minSD and the 
             maximum standard deviation to be maxSD, then to get any of the
             SDs in the 0..1 range, do:  (SD-min)/(max-min)

   - also do 1 characteristic: standard deviation of intensity in a 5x5 
     neighborhood  
        - run it on several images with different values of k
          e.g. k=3,4,5,6 for 3 of your own images
     - if image file name was image.jpg, name your output images
        texture-3means-image.jpg
        texture-4means-image.jpg
        texture-5means-image.jpg
        texture-6means-image.jpg

   - have a string as the third command line parameter with the following
     possible values:
      "color"
      "intensity-and-texture"
      "texture"

     use the value of that third command line parameter to determine which
     of the three different sets of characteristics to use to cluster

=============

PART 2

2. Use the code I already wrote for colorization which is an implementation
   of the main technique from the Welsh paper (uses l-alpha-beta color space,
   does luminance remapping, random jittered sampling, etc.)

   - instead of the l-alpha-beta color conversion, treat the
     intensity of a pixel in the color image as the luminance, and in the
     grayscale image, the value of the pixel is its intensity.  Still do
     remapping and all the other steps (just don't use l-alpha-beta color
     space)

   - cluster the color and grayscale image with k-means (same k for each)
     and use those clusters as the swatches.
      --- you'll need to figure out which cluster in the color image is the
          most appropriate match to the cluster that the grayscale pixel in
          question is part of.
          --- then you'll want to grab the color of an appropriate pixel
              within that cluster of the color image to assign to output

   - try clustering by "intensity-and-texture" or "texture" or some other
     idea that you have and implement


===========

Attach a zip file (please do not create a rar file) with all the code and:

  submit all the java files necessary for me to compile your program

  and some original images appropriately named resulting colorized images
  
  and a text file that explains which input images were used to create which
  colorized images (and the clustering technique used)

  also explain in text, your idea of how you automatically "matched" clusters
  such that a gray pixel in some cluster of the gray image is only matched
  against a color pixel in 1 corresponding cluster.



